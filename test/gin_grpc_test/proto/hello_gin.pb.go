// Code generated by protoc-gen-go-gin. DO NOT EDIT.

package proto

import (
	ginx "github.com/WeiXinao/daily_fresh/app/pkg/translator/ginx"
	core "github.com/WeiXinao/daily_fresh/pkg/common/core"
	errors "github.com/WeiXinao/daily_fresh/pkg/errors"
	code "github.com/WeiXinao/daily_fresh/pkg/gmicro/code"
	log "github.com/WeiXinao/daily_fresh/pkg/log"
	gin "github.com/gin-gonic/gin"
	universal_translator "github.com/go-playground/universal-translator"
)

type HelloServiceHttpServer struct {
	server     HelloServiceServer
	router     gin.IRouter
	translator universal_translator.Translator
}

func RegisterHelloServiceServerHTTPServer(trans universal_translator.Translator, srv HelloServiceServer, r gin.IRouter) {
	s := HelloServiceHttpServer{
		translator: trans,
		server:     srv,
		router:     r,
	}
	s.RegisterService()
}

func (s *HelloServiceHttpServer) SayHello_0(ctx *gin.Context) {
	var in SayHelloRequest

	if len(ctx.Request.URL.Query()) > 0 {
		if err := ctx.ShouldBindQuery(&in); err != nil {
			ginx.HandleValidatorError(ctx, s.translator, err)
			return
		}
	}

	if err := ctx.ShouldBindUri(&in); err != nil {
		ginx.HandleValidatorError(ctx, s.translator, err)
		return
	}

	out, err := s.server.SayHello(ctx, &in)
	if err != nil {
		log.Error(err.Error())
		core.WriteResponse(ctx, errors.WithCode(code.ErrUnknown, err.Error()), nil)
		return
	}

	core.WriteResponse(ctx, nil, out)
}

func (s *HelloServiceHttpServer) RegisterService() {
	s.router.Handle("GET", "/user/sayHello/:name", s.SayHello_0)
}
